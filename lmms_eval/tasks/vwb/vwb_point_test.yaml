group: vwb
dataset_path: sujr/vwb_eg_extend
task: vwb_point_test
test_split: train # in fact this is train is test set. I upload with mislabled tag
include: _default_template_vwb_yaml
# process_docs: !function utils_point.vwb_preprocess_dataset
output_type: generate_until
doc_to_visual: !function utils_point.vwb_doc_to_visual
doc_to_text: !function utils_point.vwb_doc_to_text
doc_to_target: !function  utils_point.vwb_doc_to_target
metadata:
  - version: 0.0
model_specific_prompt_kwargs:
  default:
    format: default
    post_prompt: |
      In the UI, where should I click if I want to complete instruction \"{goal_info}\"? Directly output the bounding box.
  seeclick:
    format: seeclick
    post_prompt: |
      Given a screenshot, I will describe a specific element; your task is to predict their locations (with point). {goal_info}
  qwen_vl_chat:
    format: qwen_vl_chat
    pre_prompt: |
      Locate the element according to the UI screenshot and instruction, output the localized bounding box.
    post_prompt: |
      Instruction: {goal_info}.
  cogagent_chat_hf:
    format: cogagent_chat_hf
    pre_prompt: |
      Generate the target element according to the UI screenshot, instruction. Please provide the answer directly (with grounding). 
    post_prompt: |
      Instruction: {goal_info}.
  deepseek_vl_chat:
    format: deepseek_vl_chat
    post_prompt: |
      In this UI screenshot, what is the position of the element corresponding to the command "{goal_info}"? Output the normalized X and Y coordinates, ranging from 0.0 to 1.0. Note that the X-axis runs horizontally from left (0.0) to right (1.0), and the Y-axis runs vertically from top (0.0) to bottom (1.0). Your should carefully view the image before finally predicting the required position in the format [X, Y].
process_results: !function utils_point.vwb_point_process_results
model_specific_process_kwargs:
  default: "default"
  seeclick: "seeclick"
  cogagent_chat_hf: "cogagent_chat_hf"
  qwen_vl_chat: "qwen_vl_chat"
metric_list: # extract the value according to the metric: "key". Thus, the process_results should output the {key1: , key2: ...}
  - metric: vwb_gnd_result
    aggregation: !function utils_point.vwb_gnd_result
    higher_is_better: true
  # - metric: partial_action_bbox_acc # action_point
  #   aggregation: !function utils_point.vwb_partial_aggregation_result
  #   higher_is_better: true
  # - metric: complete_action_bbox_acc
  #   aggregation: !function utils_point.vwb_complete_aggregation_result
  #   higher_is_better: true
  # - metric: partial_action_acc
  #   aggregation: !function utils_point.vwb_partial_aggregation_result
  #   higher_is_better: true
  # - metric: complete_action_acc
  #   aggregation: !function utils_point.vwb_complete_aggregation_result
  #   higher_is_better: true
  # - metric: nogroup_action_bbox_acc
  #   aggregation: !function utils_point.vwb_nogroup_aggregation_result
  #   higher_is_better: true


